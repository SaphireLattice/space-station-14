using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Linq;
using System.Numerics;
using Content.Shared.FixedPoint;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Chemistry.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedTODOMasterComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class TODOMasterWindow : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        public event Action<TODOReagentButton>? OnReagentButtonPressed;
        public event Action<string, TODOMasterReagentAmount>? OnStorageTransferPressed;
        public event Action<TODOMasterSlot>? OnTargetSwitched;
        public event Action<string>? OnStorageSelected;
        public event Action<string>? OnSlotEject;

        public List<ReagentInventoryItem?> _storage = [];

        /// <summary>
        /// Create and initialize the chem master UI client-side. Creates the basic layout,
        /// actual data isn't filled in until the server sends data about the chem master.
        /// </summary>
        public TODOMasterWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            PrimarySelect.OnPressed += args => OnTargetSwitched?.Invoke(TODOMasterSlot.Primary);
            SecondarySelect.OnPressed += args => OnTargetSwitched?.Invoke(TODOMasterSlot.Secondary);

            // TODO: relay slot IDs properly
            PrimarySlotButton.OnPressed += args => OnSlotEject?.Invoke(SharedSolutionTransferMachineSystem.BaseDispenserSlotId + 0);
            SecondarySlotButton.OnPressed += args => OnSlotEject?.Invoke(SharedSolutionTransferMachineSystem.BaseDispenserSlotId + 1);
        }

        private ChemMasterReagentButtons AddReagentButtons(Control? targetElement, ReagentId? filter, TODOMasterSlot source)
        {
            var buttonBox = new ChemMasterReagentButtons(filter, source, OnReagentButtonPressed);
            targetElement?.AddChild(buttonBox);
            return buttonBox;
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (TODOMasterBoundUserInterfaceState)state;

            //UpdatePanelInfo(castState);
            var primaryDisabled = castState.PrimaryContainerInfo is null;
            var secondaryDisabled = castState.SecondaryContainerInfo is null;

            PrimarySlotButton.Text = primaryDisabled ? "Insert" : "Eject";
            SecondarySlotButton.Text = secondaryDisabled ? "Insert" : "Eject";

            PrimarySelect.Pressed = castState.TargetSlot == TODOMasterSlot.Primary;
            SecondarySelect.Pressed = castState.TargetSlot == TODOMasterSlot.Secondary;

            // Otherwise OnReagentButtonPressed is unassigned and it doesn't do anything after

            if (PrimaryStorageTransfer.ChildCount == 0)
            {
                AddReagentButtons(PrimaryStorageTransfer, null, TODOMasterSlot.Primary);
                AddReagentButtons(SecondaryStorageTransfer, null, TODOMasterSlot.Secondary);
            }

            foreach (var button in PrimaryStorageTransfer.Children.First().Children)
                if (button is TODOReagentButton reagentButton)
                    reagentButton.Disabled = primaryDisabled;

            foreach (var button in SecondaryStorageTransfer.Children.First().Children)
                if (button is TODOReagentButton reagentButton)
                    reagentButton.Disabled = secondaryDisabled;

            if (castState.BufferContainersInfo is not null)
            {
                _storage = castState.BufferContainersInfo;
                _storage.Sort((a, b) =>
                {
                    var nameCompare = a?.DisplayName.CompareTo(b?.DisplayName) ?? -1;
                    if (nameCompare == 0 && a is not null)
                        return -a!.Quantity.CompareTo(b!.Quantity);
                    return nameCompare;
                });
            }

            if (_storage.Count == 0)
            {
                StorageInfo.Children.Clear();
                StorageInfo.Children.Add(new Label
                {
                    Text = Loc.GetString("chem-master-window-no-container-loaded-text")
                });
            }
            else
            {
                PopulateStorageInfo(StorageInfo, _storage, castState.SelectedSlotId);
            }


            PopulatePrecisionTransferButtons(castState.PrimaryContainerInfo, PrimaryContainerInfo, TODOMasterSlot.Primary);
            PopulatePrecisionTransferButtons(castState.SecondaryContainerInfo, SecondaryContainerInfo, TODOMasterSlot.Secondary);
        }

        private void PopulateStorageInfo(BoxContainer control, List<ReagentInventoryItem?> storage, string? selectedSlotId)
        {
            // TODO: do it smarter, don't just recreate everything on every update
            control.Children.Clear();

            foreach (var item in storage)
            {
                if (item is null)
                {
                    StorageInfo.Children.Add(new Label { Text = "NULL!!!" });
                    continue;
                }

                var reagentCard = new ReagentCardControl(item);
                var extraControls = reagentCard.GetChild(0).GetChild(2);
                reagentCard.OnEjectButtonPressed += args => OnSlotEject?.Invoke(args);
                reagentCard.OnPressed += args => OnStorageSelected?.Invoke(args);
                var button = (Button) reagentCard.GetChild(0).GetChild(1);
                button.ToggleMode = true;
                button.Disabled = false;
                button.Pressed = selectedSlotId == item.StorageSlotId;

                extraControls.Children.Add(
                    new ChemMasterReagentButtons(null, TODOMasterSlot.Buffer, (button) => OnStorageTransferPressed?.Invoke(item.StorageSlotId, button.Amount), inline: true)
                );

                StorageInfo.Children.Add(reagentCard);
            }
        }

        private void PopulatePrecisionTransferButtons(ReagentInventoryItem? containerInfo, BoxContainer targetElement, TODOMasterSlot source)
        {
            targetElement.Children.Clear();

            if (containerInfo is null)
            {
                targetElement.Children.Add(new Label
                {
                    Text = Loc.GetString("chem-master-window-no-container-loaded-text")
                });
                return;
            }

            foreach (var (reagent, quantity) in containerInfo.Reagents!)
            {
                // Try to get the prototype for the given reagent. This gives us its name.
                _prototypeManager.TryIndex(reagent.Prototype, out ReagentPrototype? proto);
                var name = proto?.LocalizedName ?? Loc.GetString("chem-master-window-unknown-reagent-text");

                if (proto == null)
                    continue;
                var container = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children =
                    {
                        new Label {Text = $"{name}: "},
                        new Label
                        {
                            Text = $"{quantity}u",
                            StyleClasses = {StyleNano.StyleClassLabelSecondaryColor}
                        },

                        // Padding
                        new Control { HorizontalExpand = true },
                        new ChemMasterReagentButtons(reagent, source, OnReagentButtonPressed)
                    }
                };

                targetElement.Children.Add(container);
            }
        }
    }

    public sealed class ChemMasterSlotSelectButton : Button
    {
        public string SlotId { get; init; }
        public event Action<ButtonEventArgs, string>? OnSelectButtonPressed;

        public ChemMasterSlotSelectButton(string slotId, Action<ButtonEventArgs, string>? action)
        {
            SlotId = slotId;
            OnSelectButtonPressed = action;
            OnPressed += args => OnSelectButtonPressed?.Invoke(args, SlotId);
        }
    }

    public sealed class ChemMasterReagentButtons : BoxContainer
    {
        public string? SlotId { get; init; }
        public event Action<TODOReagentButton>? OnReagentButtonPressed;

        public bool Disabled { get; set; }

        public ChemMasterReagentButtons(ReagentId? filter, TODOMasterSlot source, Action<TODOReagentButton>? action, bool inline = false)
        {
            Children.Add(MakeReagentButton("1", TODOMasterReagentAmount.U1, filter, source, inline ? StyleBase.ButtonOpenBoth : StyleBase.ButtonOpenRight));
            Children.Add(MakeReagentButton("5", TODOMasterReagentAmount.U5, filter, source, StyleBase.ButtonOpenBoth));
            Children.Add(MakeReagentButton("10", TODOMasterReagentAmount.U10, filter, source, StyleBase.ButtonOpenBoth));
            Children.Add(MakeReagentButton("25", TODOMasterReagentAmount.U25, filter, source, StyleBase.ButtonOpenBoth));
            Children.Add(MakeReagentButton("50", TODOMasterReagentAmount.U50, filter, source, StyleBase.ButtonOpenBoth));
            Children.Add(MakeReagentButton(Loc.GetString("chem-master-window-buffer-all-amount"), TODOMasterReagentAmount.All, filter, source, inline ? StyleBase.ButtonOpenBoth : StyleBase.ButtonOpenLeft));
            OnReagentButtonPressed = action;
        }

        private TODOReagentButton MakeReagentButton(string text, TODOMasterReagentAmount amount, ReagentId? id, TODOMasterSlot source, string styleClass)
        {
            var button = new TODOReagentButton(text, amount, id, source, styleClass);
            button.OnPressed += args => OnReagentButtonPressed?.Invoke(button);
            return button;
        }
    }

    public sealed class TODOReagentButton : Button
    {
        public TODOMasterReagentAmount Amount { get; init; }
        public TODOMasterSlot SourceSlot { get; init; }
        public ReagentId? Id { get; init; }

        public TODOReagentButton(string text, TODOMasterReagentAmount amount, ReagentId? id, TODOMasterSlot source, string styleClass)
        {
            AddStyleClass(styleClass);
            Text = text;
            Amount = amount;
            Id = id;
            SourceSlot = source;
        }
    }
}